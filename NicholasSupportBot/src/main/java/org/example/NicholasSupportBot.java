package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NicholasSupportBot extends TelegramLongPollingBot {

    private final Map<Long, Boolean> userStartedMap = new HashMap<>();
    private final Map<Long, String> userNameMap = new HashMap<>();

    @Override
    public String getBotUsername() {
        return "NicholasSupport_bot";
    }

    @Override
    public String getBotToken() {
        return "7390756964:AAE8olK2f3DxAr9Q5dv4EWE_q-6sIK_S9Jc";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update.getMessage().getChatId(), update.getMessage().getText(), update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleIncomingMessage(long chatId, String messageText, Message message) {
        SendMessage response = new SendMessage();
        response.setChatId(String.valueOf(chatId));

        if (messageText.equals("/start")) {
            userStartedMap.put(chatId, true);
            String welcomeMessage = "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è!\n\n" +
                    "–Ø ‚Äî NicholasSupport Bot, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∞–º–∏–º Nicholas'–æ–º, —á—Ç–æ–±—ã –±—ã—Ç—å –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –∏ –æ—Ç–ª–∏—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. " +
                    "–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —è –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è, –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –≤—Å—ë –ª—É—á—à–µ –∏ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –≤–∞—Å.\n\n" +
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–≤–µ—Ç!\", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.";
            response.setText(welcomeMessage);
            response.setReplyMarkup(createHelloButton());
            try {
                execute(response);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else if (userStartedMap.getOrDefault(chatId, false) && !userNameMap.containsKey(chatId)) {
            userNameMap.put(chatId, messageText);
            String personalizedMessage = "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + messageText + "! üòä\n" +
                    "–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –º—ã —Å –≤–∞–º–∏ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ä—É–∂–∏–º—Å—è. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å.";
            response.setText(personalizedMessage);
            response.setReplyMarkup(createMainMenuButton());
            userStartedMap.put(chatId, false);
            try {
                execute(response);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else {
            response.setText("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–≤–µ—Ç!\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.");
            try {
                execute(response);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    private InlineKeyboardMarkup createHelloButton() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton helloButton = new InlineKeyboardButton();
        helloButton.setText("üëã –ü—Ä–∏–≤–µ—Ç!");
        helloButton.setCallbackData("HELLO");

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(helloButton);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(row);

        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup createMainMenuButton() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton mainMenuButton = new InlineKeyboardButton();
        mainMenuButton.setText("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        mainMenuButton.setCallbackData("MAIN_MENU");

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(mainMenuButton);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(row);

        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup createMainMenu() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton infoButton = new InlineKeyboardButton();
        infoButton.setText("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        infoButton.setCallbackData("INFO");

        InlineKeyboardButton socialButton = new InlineKeyboardButton();
        socialButton.setText("üåê –°–æ—Ü—Å–µ—Ç–∏");
        socialButton.setCallbackData("SOCIAL");

        InlineKeyboardButton gamesButton = new InlineKeyboardButton();
        gamesButton.setText("üéÆ –ò–≥—Ä—ã");
        gamesButton.setCallbackData("GAMES");

        InlineKeyboardButton notificationsButton = new InlineKeyboardButton();
        notificationsButton.setText("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        notificationsButton.setCallbackData("NOTIFICATIONS");

        InlineKeyboardButton otherButton = new InlineKeyboardButton();
        otherButton.setText("üìÅ –î—Ä—É–≥–æ–µ");
        otherButton.setCallbackData("OTHER");

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(infoButton);
        row1.add(socialButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(gamesButton);
        row2.add(notificationsButton);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(otherButton);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup createGamesMenu() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton pubgButton = new InlineKeyboardButton();
        pubgButton.setText("1. Pubg mobile");
        pubgButton.setCallbackData("PUBG");

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(pubgButton);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(row1);

        for (int i = 2; i <= 10; i++) {
            InlineKeyboardButton emptyButton = new InlineKeyboardButton();
            emptyButton.setText(i + ". –ü—É—Å—Ç–æ");
            emptyButton.setCallbackData("EMPTY_" + i);
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(emptyButton);
            rows.add(row);
        }

        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();
        int messageId = callbackQuery.getMessage().getMessageId();

        if (callbackData.equals("HELLO")) {
            SendMessage helloMessage = new SendMessage();
            helloMessage.setChatId(String.valueOf(chatId));
            helloMessage.setText("–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! üòä\n" +
                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, –∫–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ö–∞–∫ —è –º–æ–≥—É –Ω–∞–∑—ã–≤–∞—Ç—å –≤–∞—Å?");
            helloMessage.setReplyMarkup(null);
            try {
                execute(helloMessage);
                EditMessageText removeHelloButtonMessage = new EditMessageText();
                removeHelloButtonMessage.setChatId(String.valueOf(chatId));
                removeHelloButtonMessage.setMessageId(messageId);
                removeHelloButtonMessage.setText(callbackQuery.getMessage().getText());
                removeHelloButtonMessage.setReplyMarkup(null);
                execute(removeHelloButtonMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else if (callbackData.equals("MAIN_MENU")) {
            SendMessage mainMenuMessage = new SendMessage();
            mainMenuMessage.setChatId(String.valueOf(chatId));
            mainMenuMessage.setText("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
            mainMenuMessage.setReplyMarkup(createMainMenu());
            try {
                execute(mainMenuMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else if (callbackData.equals("GAMES")) {
            SendMessage gamesMenuMessage = new SendMessage();
            gamesMenuMessage.setChatId(String.valueOf(chatId));
            gamesMenuMessage.setText("üéÆ –ò–≥—Ä—ã:");
            gamesMenuMessage.setReplyMarkup(createGamesMenu());
            try {
                execute(gamesMenuMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else if (callbackData.equals("PUBG")) {
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ PUBG Mobile
            String pubgStats = getPubgStats(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ PUBG Mobile
            SendPhoto pubgPhotoMessage = new SendPhoto();
            pubgPhotoMessage.setChatId(String.valueOf(chatId));
            InputFile photoFile = new InputFile("https://i.postimg.cc/cC42CjL7/brgame-screenshot-20240527160458.jpg"); // –£–∫–∞–∂–∏—Ç–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ File
            pubgPhotoMessage.setPhoto(photoFile); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–∞ InputFile
            pubgPhotoMessage.setCaption(pubgStats); // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç

            try {
                execute(pubgPhotoMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        } else if (callbackData.startsWith("EMPTY_")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        }
    }

    private String getPubgStats() {
        // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        String playerName = "Nicholas";
        String playerId = "51476062890";
        String clanName = "VillainsZI";

        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ Pubg mobile:\n\n" +
                "üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + playerName + "\n" +
                "üÜî ID: " + playerId + "\n" +
                "üèÖ –ö–ª–∞–Ω: " + clanName + "\n" +
                "üó∫Ô∏è –õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–∞: Erangel\n" +
                "üî´ –õ—é–±–∏–º–æ–µ –æ—Ä—É–∂–∏–µ: M416";
    }
}
